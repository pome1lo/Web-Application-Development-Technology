HTTP 


Протокол HTTP (HyperText Transfer Protocol) - это протокол прикладного уровня для распределенных, совместных гипертекстовых информационных систем¹. Он является основой Всемирной паутины и в настоящее время работает поверх TCP¹.

В начальной работе будет документироваться существующая практика и краткосрочные расширения. Последующая работа будет посвящена расширению и пересмотру протокола¹. Уже упоминались следующие направления:
- Улучшенная эффективность
- Расширенные операции
- Расширенные переговоры
- Более богатая метаинформация
- Связи с протоколами безопасности¹

Однако рабочая группа HTTP не будет рассматривать расширения безопасности HTTP, поскольку ожидается, что они будут темой другой рабочей группы¹.

Спецификация протокола HTTP была сохранена в форме гипертекста, и снимок был распространен в виде черновика Интернета между 11/93 и 5/94¹. Ревизия спецификации Бернерс-Ли, Филдинга и Фристик Нильсена была распространена в виде черновика Интернета между 11/94 и 5/95¹.

После создания рабочая группа расширит и завершит этот документ, чтобы отразить HTTP/1.0, как он был реализован клиентами и серверами Всемирной паутины до ноября 1994 года¹. Получившаяся спецификация HTTP/1.0 будет опубликована для обзора в виде черновика Интернета и, если это будет считаться целесообразным, будет представлена IESG для рассмотрения в качестве предложенного стандарта или информационного RFC¹.

Параллельно с вышеупомянутыми усилиями рабочая группа будет заниматься определением (или выбором из различных определений) протокола следующего поколения для передачи гипертекста (HTTPng)¹.

Описание HTTP/1.0, как он обычно практикуется в настоящее время в Интернете, было представлено для превращения в информационный RFC¹. Рабочая группа рассматривает улучшения/ограничения текущей практики с целью формирования спецификации протокола HTTP, подходящей для последующего рассмотрения в качестве предложенного стандарта¹.



Вот объяснение назначения указанных заголовков ЗАПРОСА:

- **Cookie**: Этот заголовок автоматически добавляется для отправки куки, связанных с этим конечным точкам. Используйте менеджер куки, чтобы удалить заголовок или изменить его значение.
- **Postman-Token**: Этот заголовок добавляет случайный UUID к каждому исходящему запросу. Postman добавляет этот заголовок для разработчиков API, чтобы лучше отладить отправленные запросы и гарантировать, что отдельные запросы выглядят различными для принимающего сервера.
- **Host**: Этот заголовок добавляется для идентификации доменного имени, для которого запрос отправляется на сервер. Этот заголовок неявно отправляется каждым HTTP-клиентом.
- **User-Agent**: Этот заголовок добавляется, чтобы помочь серверу идентифицировать Postman как приложение или клиент, отправляющий HTTP-запрос.
- **Accept**: Этот заголовок добавляется, чтобы сообщить серверу, что Postman может понимать и обрабатывать все формы типов содержимого ответа.
- **Accept-Encoding**: Этот заголовок добавляется, чтобы указать серверу, что HTTP-клиент Postman поддерживает определенный список алгоритмов кодирования содержимого или сжатия в качестве ответа.
- **Connection**: Postman добавил заголовок Connection, чтобы указать серверу, что основное сетевое соединение останется открытым после получения текущего ответа. Это позволяет Postman повторно использовать то же соединение для более быстрого времени ответа при последующих запросах к тому же серверу.

Вот объяснение назначения указанных заголовков ОТВЕТА:

- **Date**: Этот общий заголовок содержит дату и время отправки сообщения.
- **Server**: Содержит информацию о том, как сервер обрабатывает запросы.
- **Set-Cookie**: Отправляет куки от сервера к пользовательскому агенту.
- **Expires**: Указывает дату и время, после которых ответ считается устаревшим.
- **Cache-Control**: Общий заголовок, указывающий правила кэширования в запросах и ответах. Правила для продолжительности кэша измеряются в секундах.
- **Pragma**: Общий заголовок, который является специфичным для реализации и может иметь различные эффекты на цепочке запрос-ответ.
- **Vary**: Определяет, как сопоставить будущие заголовки запросов, чтобы решить, можно ли использовать кэшированный ответ, а не запрашивать новый.
- **Content-Encoding**: Заголовок сущности, указывающий метод кодирования, примененный к телу сущности.
- **Keep-Alive**: Пользовательский заголовок.
- **Connection**: Общий заголовок, указывающий, будет ли текущее сетевое соединение оставаться открытым после завершения текущей транзакции.
- **Transfer-Encoding**: Указывает форму кодирования, используемую для передачи сущности пользователю.,
- **Content-Type:** Это заголовок сущности, который указывает медиа-тип ресурса. Он используется для определения способа обработки содержимого тела сообщения. Например, Content-Type: text/html указывает, что тело сообщения следует интерпретировать как HTML.

Статус ответа HTTP указывает, был ли успешно выполнен конкретный HTTP-запрос. Ответы классифицируются на пять классов¹²:

1. **Информационные ответы (100–199)**: Этот класс ответов указывает, что запрос был получен и понят. Он выдается на временной основе, пока продолжается обработка запроса¹.
2. **Успешные ответы (200–299)**: Этот класс ответов указывает, что запрос был успешно получен, понят и принят¹.
3. **Сообщения о перенаправлении (300–399)**: Этот класс ответов указывает, что для завершения запроса необходимо предпринять дополнительные действия¹.
4. **Ответы об ошибках клиента (400–499)**: Этот класс ответов указывает, что запрос содержит некорректный синтаксис или не может быть выполнен¹.
5. **Ответы об ошибках сервера (500–599)**: Этот класс ответов указывает, что сервер не смог выполнить, по-видимому, допустимый запрос¹.

Каждый код статуса имеет свое уникальное значение и используется для передачи определенной информации от сервера к клиенту. Например, код статуса `200` означает, что запрос был успешно выполнен, а код `404` указывает, что запрашиваемый ресурс не найден¹².



ВОПРОСЫ


19. В каком документе описывает протокол HTTP?
    - Протокол HTTP описывается в документах, известных как RFC (Request for Comments). Эти документы содержат технические спецификации и стандарты, широко применяемые в Интернете⁵.
20. Какого уровня HTTP-протокол в моделях OSI/ISO, TCP/IP?
    - HTTP-протокол находится на прикладном уровне (7-й уровень) в модели OSI/ISO. В модели TCP/IP он также находится на прикладном уровне²⁶.
21. Что такое web-приложение?
    - Web-приложение - это программное обеспечение, которое пользователи могут использовать, взаимодействуя с веб-браузером через Интернет¹².
22. Какие порты использует HTTP-протокол?
    - Протокол HTTP обычно использует порт 80 для незащищенных соединений и порт 443 для защищенных соединений, использующих HTTPS²¹.
23. Что такое RFC?
    - RFC (Request for Comments) - это документ из серии пронумерованных информационных документов Интернета, содержащих технические спецификации и стандарты, широко применяемые во всемирной сети⁵.
24. Почему HTTP-протокол называют ассиметричным?
    - HTTP-протокол часто называют ассиметричным из-за его модели взаимодействия "клиент-сервер". Клиент (обычно веб-браузер) инициирует запрос к серверу, который затем отвечает на этот запрос. Это ассиметрично, потому что сервер обычно не инициирует контакт с клиентом².
25. Что такое MIME?
    - MIME (Multipurpose Internet Mail Extensions) - это стандарт, который описывает природу и формат документа, файла или набора байтов. Он используется в Интернете для указания содержимого веб-страниц и электронной почты²⁴.
